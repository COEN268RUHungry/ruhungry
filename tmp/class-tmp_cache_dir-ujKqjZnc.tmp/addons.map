{"version":3,"sources":["ember-cli-dates.js","ember-cli-dates/helpers/date-and-time.js","ember-cli-dates/helpers/day-of-the-week.js","ember-cli-dates/helpers/month-and-day.js","ember-cli-dates/helpers/month-and-year.js","ember-cli-dates/helpers/time-ago-in-words.js","ember-cli-dates/helpers/time-ahead-in-words.js","ember-cli-dates/helpers/time-delta-in-words.js","ember-cli-dates/helpers/time-format.js","ember-cli-dates/utils/time-locale.js","ember-cli-dates/utils/valid-args.js","ember-google-map.js","ember-google-map/core/google-object-event.js","ember-google-map/core/google-object-property.js","ember-google-map/core/helpers.js","ember-google-map/mixins/google-array.js","ember-google-map/mixins/google-object.js","ember-google-map/utils/load-google-map.js"],"sourcesContent":["define(\"ember-cli-dates\", [\"ember-cli-dates/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define('ember-cli-dates/helpers/date-and-time', ['exports', 'ember', 'ember-cli-dates/helpers/time-format'], function (exports, Ember, time_format) {\n\n  'use strict';\n\n  exports.dateAndTime = dateAndTime;\n\n  function dateAndTime(date, optionalLocale) {\n    return time_format.timeFormat(date, 'LLL', optionalLocale);\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(dateAndTime);\n\n});","define('ember-cli-dates/helpers/day-of-the-week', ['exports', 'ember', 'moment', 'ember-cli-dates/utils/time-locale', 'ember-cli-dates/utils/valid-args'], function (exports, Ember, moment, timeLocale, validArgs) {\n\n  'use strict';\n\n  exports.dayOfTheWeek = dayOfTheWeek;\n\n  function dayOfTheWeek(date, optionalLocale) {\n    validArgs['default'](arguments, 'day-of-the-week');\n\n    if (Ember['default'].isBlank(date)) { return ''; }\n\n    var locale = timeLocale['default'](optionalLocale);\n\n    return moment['default'](date).locale(locale).format('dddd');\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(dayOfTheWeek);\n\n});","define('ember-cli-dates/helpers/month-and-day', ['exports', 'ember', 'moment', 'ember-cli-dates/utils/time-locale', 'ember-cli-dates/utils/valid-args'], function (exports, Ember, moment, timeLocale, validArgs) {\n\n  'use strict';\n\n  exports.monthAndDay = monthAndDay;\n\n  function monthAndDay(date, optionalLocale) {\n    validArgs['default'](arguments, 'day-of-the-week');\n\n    if (Ember['default'].isBlank(date)) { return ''; }\n\n    var locale = timeLocale['default'](optionalLocale);\n\n    return moment['default'](date).locale(locale).format('MMM Do');\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(monthAndDay);\n\n});","define('ember-cli-dates/helpers/month-and-year', ['exports', 'ember', 'moment', 'ember-cli-dates/utils/time-locale', 'ember-cli-dates/utils/valid-args'], function (exports, Ember, moment, timeLocale, validArgs) {\n\n  'use strict';\n\n  exports.monthAndYear = monthAndYear;\n\n  function monthAndYear(date, optionalLocale) {\n    validArgs['default'](arguments, 'day-of-the-week');\n\n    if (Ember['default'].isBlank(date)) { return ''; }\n\n    var locale = timeLocale['default'](optionalLocale);\n\n    return moment['default'](date).locale(locale).format('MMM YYYY');\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(monthAndYear);\n\n});","define('ember-cli-dates/helpers/time-ago-in-words', ['exports', 'ember', 'moment', 'ember-cli-dates/utils/time-locale', 'ember-cli-dates/utils/valid-args'], function (exports, Ember, moment, timeLocale, validArgs) {\n\n  'use strict';\n\n  exports.timeAgoInWords = timeAgoInWords;\n\n  function timeAgoInWords(date, optionalLocale) {\n    validArgs['default'](arguments, 'time-ago-in-words');\n\n    if (Ember['default'].isBlank(date)) { return ''; }\n\n    var locale = timeLocale['default'](optionalLocale);\n\n    return moment['default'](date).locale(locale).fromNow();\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(timeAgoInWords);\n\n});","define('ember-cli-dates/helpers/time-ahead-in-words', ['exports', 'ember', 'moment', 'ember-cli-dates/utils/time-locale', 'ember-cli-dates/utils/valid-args'], function (exports, Ember, moment, timeLocale, validArgs) {\n\n  'use strict';\n\n  exports.timeAheadInWords = timeAheadInWords;\n\n  function timeAheadInWords(date, optionalLocale) {\n    validArgs['default'](arguments, 'time-ahead-in-words');\n\n    if (Ember['default'].isBlank(date)) { return ''; }\n\n    var locale = timeLocale['default'](optionalLocale);\n\n    return moment['default'](date).locale(locale).fromNow();\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(timeAheadInWords);\n\n});","define('ember-cli-dates/helpers/time-delta-in-words', ['exports', 'ember', 'moment', 'ember-cli-dates/utils/time-locale', 'ember-cli-dates/utils/valid-args'], function (exports, Ember, moment, timeLocale, validArgs) {\n\n  'use strict';\n\n  exports.timeDeltaInWords = timeDeltaInWords;\n\n  function timeDeltaInWords(date, optionalLocale) {\n    validArgs['default'](arguments, 'time-delta-in-words');\n\n    if (Ember['default'].isBlank(date)) { return ''; }\n\n    var locale = timeLocale['default'](optionalLocale);\n\n    return moment['default'](date).locale(locale).fromNow();\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(timeDeltaInWords);\n\n});","define('ember-cli-dates/helpers/time-format', ['exports', 'ember', 'moment', 'ember-cli-dates/utils/time-locale', 'ember-cli-dates/utils/valid-args'], function (exports, Ember, moment, timeLocale, validArgs) {\n\n  'use strict';\n\n  exports.timeFormat = timeFormat;\n\n  function timeFormat(date, optionalFormat, optionalLocale) {\n    validArgs['default'](arguments, 'time-format');\n\n    if (Ember['default'].isBlank(date)) { return ''; }\n\n    var locale = timeLocale['default'](optionalLocale),\n        format = 'LL';\n\n    if (Ember['default'].typeOf(optionalFormat) === 'string') {\n      format = optionalFormat;\n    }\n\n    return moment['default'](date).locale(locale).format(format);\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(timeFormat);\n\n});","define('ember-cli-dates/utils/time-locale', ['exports', 'ember', 'moment'], function (exports, Ember, moment) {\n\n  'use strict';\n\n  function timeLocale(optionalLocale) {\n    if (Ember['default'].typeOf(optionalLocale) === 'string') {\n      return optionalLocale;\n    }\n\n    return moment['default']().locale();\n  }\n  exports['default'] = timeLocale;\n\n});","define('ember-cli-dates/utils/valid-args', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  function validArgs(args, helper) {\n    if (Ember['default'].isEmpty(args) || args.length === 1) {\n      throw new Ember['default'].Error('[ember-cli-dates:' + helper + '] Invalid number of arguments, expected at least 1');\n    }\n  }\n  exports['default'] = validArgs;\n\n});","define(\"ember-google-map\", [\"ember-google-map/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define('ember-google-map/core/google-object-event', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /* globals google */\n  var slice = [].slice;\n  var fmt = Ember['default'].String.fmt;\n\n  /**\n   * @class GoogleObjectEvent\n   * @param {String} name\n   * @param {{target: Ember.Object, action: String, method: String|Function, [prepend]: boolean}} config\n   * @constructor\n   */\n  var GoogleObjectEvent = function (name, config) {\n    this._cfg = {\n      name:    name,\n      method:  config.method || (config.action ? null : name),\n      action:  config.action || null,\n      target:  config.target || null,\n      prepend: config.prepend === undefined ? !config.action : !!config.prepend\n    };\n  };\n\n  /**\n   * Event handler wrapper\n   *\n   * @method callHandler\n   * @param {Ember.Object} emberObject\n   * @returns {*}\n   */\n  GoogleObjectEvent.prototype.callHandler = function (emberObject) {\n    var method, target = this._cfg.target || emberObject, args;\n    args = slice.call(arguments);\n    if (this._cfg.prepend) {\n      args.unshift(this._cfg.name);\n    }\n    if (this._cfg.action) {\n      args.unshift(this._cfg.action);\n      return target.send.apply(target, args);\n    }\n    method = this._cfg.method;\n    if (typeof method === 'string') {\n      method = target[method];\n    }\n    if (method) {\n      return method.apply(target, args);\n    }\n    else {\n      // silently warn that the method does not exists and return\n      Ember['default'].warn(fmt('[google-map] The method `%@` was not found on the target, no action taken.'));\n    }\n  };\n\n  /**\n   * Link the given ember object and google object, and start listening for the google event\n   *\n   * @method link\n   * @param {Ember.Object} emberObject\n   * @param {google.maps.MVCObject} googleObject\n   */\n  GoogleObjectEvent.prototype.link = function (emberObject, googleObject) {\n    var name, listener;\n    Ember['default'].warn('linking a google object event but it has not been unlinked first', !this._listener);\n    if (emberObject && googleObject) {\n      this._listener = listener = Ember['default'].run.bind(this, 'callHandler', emberObject);\n      name = this._cfg.name;\n      listener._googleHandle = googleObject.addListener(name, listener);\n      this._listener.unlink = function () {\n        google.maps.event.removeListener(listener._googleHandle);\n      };\n    }\n  };\n\n  /**\n   * Unlink the previously linked ember and google objects, and stop listening for the google event\n   *\n   * @method unlink\n   */\n  GoogleObjectEvent.prototype.unlink = function () {\n    if (this._listener) {\n      this._listener.unlink();\n      this._listener = null;\n    }\n  };\n\n  exports['default'] = GoogleObjectEvent;\n\n});","define('ember-google-map/core/google-object-property', ['exports', 'ember', 'ember-google-map/core/helpers'], function (exports, Ember, helpers) {\n\n  'use strict';\n\n  /* globals google */\n  var GoogleObjectProperty = function (key, config) {\n    var props = key.split(',');\n    this._cfg = {\n      key:        key,\n      properties: props,\n      name:       config.name || props.join('_').camelize(),\n      toGoogle:   config.toGoogle || null,\n      fromGoogle: config.fromGoogle || null,\n      read:       config.read || null,\n      write:      config.write || null,\n      event:      config.event || null,\n      cast:       config.cast || null,\n      readOnly:   config.readOnly || false,\n      optionOnly: config.optionOnly || false\n    };\n  };\n\n  /**\n   * Gets the name of the google property\n   *\n   * @returns {String}\n   */\n  GoogleObjectProperty.prototype.getName = function(){\n    return this._cfg.name;\n  };\n\n  /**\n   * Convert the value from google to Ember\n   *\n   * @method fromGoogleValue\n   * @param {*} value\n   * @returns {Object}\n   */\n  GoogleObjectProperty.prototype.fromGoogleValue = function (value) {\n    var val;\n    if (this._cfg.fromGoogle) {\n      val = this._cfg.fromGoogle.call(this, value);\n    }\n    else {\n      val = helpers['default'].makeObj(this._cfg.key, value);\n    }\n    return val;\n  };\n\n  /**\n   * Convert the value from Ember to google\n   *\n   * @method toGoogleValue\n   * @param {Object} obj\n   * @returns {*}\n   */\n  GoogleObjectProperty.prototype.toGoogleValue = function (obj) {\n    var val;\n    if (this._cfg.toGoogle) {\n      val = this._cfg.toGoogle.call(this, obj);\n    }\n    else {\n      val = this._cfg.properties.length > 1 ? obj : obj[this._cfg.key];\n      if (this._cfg.cast) {\n        val = this._cfg.cast(val);\n      }\n    }\n    return val;\n  };\n\n  /**\n   * Reads the value from the given google object\n   *\n   * @method readGoogle\n   * @param {google.maps.MVCObject} googleObject\n   * @returns {Object}\n   */\n  GoogleObjectProperty.prototype.readGoogle = function (googleObject) {\n    var val;\n    if (this._cfg.read) {\n      val = this._cfg.read.call(this, googleObject);\n    }\n    else if (this._cfg.optionOnly) {\n      return Object.create(null);\n    }\n    else {\n      val = googleObject['get' + this._cfg.name.capitalize()]();\n    }\n    return this.fromGoogleValue(val);\n  };\n\n  /**\n   * Writes the given value to the given google object\n   *\n   * @method writeGoogle\n   * @param {google.maps.MVCObject} googleObject\n   * @param {Object} obj\n   */\n  GoogleObjectProperty.prototype.writeGoogle = function (googleObject, obj) {\n    var val, p, diff = false, actual;\n    if (this._cfg.optionOnly) {\n      return;\n    }\n    actual = this.readGoogle(googleObject);\n    for (var i = 0; i < this._cfg.properties.length; i++) {\n      p = this._cfg.properties[i];\n      if ('' + obj[p] !== '' + actual[p]) {\n        diff = true;\n        break;\n      }\n    }\n    if (!diff) {\n      return;\n    }\n    val = this.toGoogleValue(obj);\n    if (this._cfg.write) {\n      this._cfg.write.call(this, googleObject, val);\n    }\n    else {\n      googleObject['set' + this._cfg.name.capitalize()](val);\n    }\n  };\n\n  /**\n   * Links the given google and ember objects together\n   *\n   * @method link\n   * @param {Ember.Object} emberObject\n   * @param {google.maps.MVCObject} googleObject\n   */\n  GoogleObjectProperty.prototype.link = function (emberObject, googleObject) {\n    var _this = this, event, props, listeners;\n    Ember['default'].warn('linking a google object property but it has not been unlinked first', !this._listeners);\n    if (emberObject && googleObject && !this._cfg.optionOnly) {\n      props = this._cfg.properties;\n      event = this._cfg.event;\n      // define our listeners\n      this._listeners = listeners = {\n        ember:  function () {\n          var obj = emberObject.getProperties(props);\n          this.writeGoogle(googleObject, obj);\n        },\n        google: Ember['default'].run.bind(this, function () {\n          var p, diff = true,\n            obj = this.readGoogle(googleObject),\n            actual = emberObject.getProperties(props);\n          for (var i = 0; i < props.length; i++) {\n            p = props[i];\n            if ('' + obj[p] !== '' + actual[p]) {\n              diff = true;\n              break;\n            }\n          }\n          if (!diff) {\n            return;\n          }\n          emberObject.setProperties(obj);\n        })\n      };\n      // listen google event\n      if (event) {\n        listeners._googleHandle = googleObject.addListener(event, listeners.google);\n      }\n      // listen change on Ember properties\n      props.forEach(function (name) {\n        emberObject.addObserver(name, this, listeners.ember);\n      }, this);\n\n      // setup the un-linkers\n      listeners.unlink = function () {\n        props.forEach(function (name) {\n          emberObject.removeObserver(name, this, listeners.ember);\n        }, _this);\n        listeners.ember = null;\n        if (event) {\n          google.maps.event.removeListener(listeners._googleHandle);\n        }\n        listeners.google = null;\n      };\n    }\n  };\n\n  /**\n   * Unlink the previously linked ember and google objects, and stop listening for events\n   */\n  GoogleObjectProperty.prototype.unlink = function () {\n    if (this._listeners) {\n      this._listeners.unlink();\n      this._listeners = null;\n    }\n  };\n\n  /**\n   * Fill a google options object reading the options from the given Ember Object\n   *\n   * @method toOptions\n   * @param {Ember.Object} source\n   * @param {Object} options\n   */\n  GoogleObjectProperty.prototype.toOptions = function (source, options) {\n    var val = this.toGoogleValue(source.getProperties(this._cfg.properties));\n    if (val !== undefined) {\n      options[this._cfg.name] = val;\n    }\n  };\n\n  exports['default'] = GoogleObjectProperty;\n\n});","define('ember-google-map/core/helpers', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /* globals google */\n  var _hasGoogleLib = {};\n  var $get = Ember['default'].get;\n\n  var cast = {\n    number:  function (val) {\n      if (typeof val === 'string') {\n        val = Number(val);\n      }\n      if (val !== null && val !== undefined && typeof val === 'number' && !isNaN(val) && isFinite(val)) {\n        return val;\n      }\n      return undefined;\n    },\n    integer: function (val) {\n      if ((val = cast.number(val)) !== undefined) {\n        return Math.round(val);\n      }\n      return val;\n    }\n  };\n\n  var helpers = {\n    TYPE_ROAD:      'road',\n    TYPE_TERRAIN:   'terrain',\n    TYPE_HYBRID:    'hybrid',\n    TYPE_SATELLITE: 'satellite',\n\n    PLACE_TYPE_ADDRESS:      'geocode',\n    PLACE_TYPE_BUSINESS:     'establishment',\n    PLACE_TYPE_ADMIN_REGION: '(regions)',\n    PLACE_TYPE_LOCALITY:     '(cities)',\n\n    _typeMap: {\n      road:      'ROADMAP',\n      terrain:   'TERRAIN',\n      hybrid:    'HYBRID',\n      satellite: 'SATELLITE'\n    },\n\n    _autoCompleteService: null,\n\n    cast: cast,\n\n    hasGoogleLib: function (lib) {\n      lib = lib || '';\n      if (!_hasGoogleLib.hasOwnProperty(lib)) {\n        if (lib) {\n          helpers.hasGoogleLib('');\n        }\n        if (lib) {\n          _hasGoogleLib[lib] = !!(_hasGoogleLib[''] && google.maps[lib]);\n        }\n        else {\n          _hasGoogleLib[lib] = !!(window.google && google.maps);\n        }\n        if (!_hasGoogleLib['']) {\n          Ember['default'].warn(\n            '[google-map] Something went wrong with Google Map library.' +\n            ' If you think it is not your side, please report the issue at' +\n            ' https://github.com/huafu/ember-google-map/issues.' +\n            ' Also be sure to have used `return this.loadGoogleMap()` in one of the 3 `model` hooks' +\n            ' of each route which would use the component (only if you have set `google.lazyLoad`' +\n            ' to true in your `config/environment.js.`)'\n          );\n        }\n        else if (lib && !_hasGoogleLib[lib]) {\n          Ember['default'].warn(\n            '[google-map] You are using a module of ember-google-map which needs the %@ google library.' +\n            ' But \\'%@\\' is not in the `ENV.googleMap.libraries` config array of your `config/environment.js`'.fmt(lib)\n          );\n        }\n      }\n      return _hasGoogleLib[lib];\n    },\n\n    /**\n     * Creates an object using arguments (propertyName1, propertyValue1, propertyName2, propertyValue2, ...)\n     * @param {String} [propName1]\n     * @param {String} [propValue1]\n     * @param {String} [others]*\n     * @returns {Object}\n     */\n    makeObj: function () {\n      var res = {};\n      for (var i = 0; i < arguments.length; i += 2) {\n        res[arguments[i]] = arguments[i + 1];\n      }\n      return res;\n    },\n\n    /**\n     * Convert our type to the google one\n     * @param {String} type\n     * @returns {String}\n     */\n    typeToGoogleType:     function (type) {\n      var name;\n      if (helpers.hasGoogleLib() && (name = helpers._typeMap[type])) {\n        return google.maps.MapTypeId[name];\n      }\n    },\n    /**\n     * Convert google map type to our type\n     * @param {String} type\n     * @returns {string}\n     */\n    typeFromGoogleType:   function (type) {\n      if (helpers.hasGoogleLib() && type) {\n        for (var k in helpers._typeMap) {\n          if (helpers._typeMap.hasOwnProperty(k) && google.maps.MapTypeId[helpers._typeMap[k]] === type) {\n            return k;\n          }\n        }\n      }\n    },\n    /**\n     * Convert a lat/lng pair to a google one\n     * @param {Number} lat\n     * @param {Number} lng\n     * @returns {google.maps.LatLng}\n     */\n    latLngToGoogleLatLng: function (lat, lng) {\n      if (lat != null && lng != null && helpers.hasGoogleLib()) {\n        return new google.maps.LatLng(Number(lat), Number(lng));\n      }\n    },\n    /**\n     * Convert a google LatLng object to lat/lng\n     * @param {google.maps.LatLng} obj\n     * @returns {Array<Number>}\n     */\n    googleLatLngToLatLng: function (obj) {\n      return [obj.lat(), obj.lng()];\n    },\n\n    /**\n     * Converts SW lat/lng + NE lat/lng to a google.map.LatLngBounds object\n     * @param {Number} swLat\n     * @param {Number} swLng\n     * @param {Number} neLat\n     * @param {Number} neLng\n     * @returns {google.maps.LatLngBounds}\n     */\n    boundsToGoogle: function (swLat, swLng, neLat, neLng) {\n      if (swLat != null && swLng != null && neLat != null && neLng != null && helpers.hasGoogleLib()) {\n        return new google.maps.LatLngBounds(\n          helpers.latLngToGoogleLatLng(swLat, swLng),\n          helpers.latLngToGoogleLatLng(neLat, neLng)\n        );\n      }\n    },\n\n    latLngProperty: function () {\n      return Ember['default'].computed(function () {\n        return {lat: null, lng: null};\n      });\n    },\n\n    autoCompleteService: function () {\n      if (!helpers._autoCompleteService && helpers.hasGoogleLib('places')) {\n        helpers._autoCompleteService = new google.maps.places.AutocompleteService();\n      }\n      return helpers._autoCompleteService;\n    },\n\n    autoCompleteAddress: function (options) {\n      var service = helpers.autoCompleteService();\n      if (service) {\n        return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n          var Status = google.maps.places.PlacesServiceStatus, err;\n          service.getPlacePredictions(options, function (results, status) {\n            if (status === Status.OK || status === Status.ZERO_RESULTS) {\n              resolve(results || []);\n            }\n            else {\n              err = new Error('error retrieving completion (' + status + ')');\n              err.status = status;\n              reject(err);\n            }\n          });\n        });\n      }\n      return Ember['default'].RSVP.reject(new Error('could not access google place library'));\n    },\n\n    _typeFromGoogle:   function (key, val) {\n      if (arguments.length === 1) {\n        val = key;\n        key = null;\n      }\n      return helpers.makeObj(key || 'type', helpers.typeFromGoogleType(val));\n    },\n    _typeToGoogle:     function (key, obj) {\n      if (arguments.length === 1) {\n        obj = key;\n        key = null;\n      }\n      return helpers.typeToGoogleType(obj[key || 'type']);\n    },\n    _latLngFromGoogle: function (latKey, lngKey, val) {\n      if (arguments.length === 1) {\n        val = latKey;\n        latKey = null;\n      }\n      return helpers.makeObj(latKey || 'lat', val.lat(), lngKey || 'lng', val.lng());\n    },\n    _latLngToGoogle:   function (latKey, lngKey, obj) {\n      if (arguments.length === 1) {\n        obj = latKey;\n        latKey = null;\n      }\n      return helpers.latLngToGoogleLatLng($get(obj, latKey || 'lat'), $get(obj, lngKey || 'lng'));\n    },\n    _boundsToGoogle:   function (swLatKey, swLngKey, neLatKey, neLngKey, obj) {\n      if (arguments.length === 1) {\n        obj = swLatKey;\n        swLatKey = null;\n        if (obj && obj.sw && obj.ne) {\n          swLatKey = 'sw.lat';\n          swLngKey = 'sw.lng';\n          neLatKey = 'ne.lat';\n          neLngKey = 'ne.lng';\n        }\n      }\n      return helpers.boundsToGoogle(\n        $get(obj, swLatKey || 'southWestLat'), $get(obj, swLngKey || 'southWestLng'),\n        $get(obj, neLatKey || 'northEastLat'), $get(obj, neLngKey || 'northEastLng')\n      );\n    }\n  };\n\n  exports['default'] = helpers;\n\n  exports.cast = cast;\n\n});","define('ember-google-map/mixins/google-array', ['exports', 'ember', 'ember-google-map/core/helpers'], function (exports, Ember, helpers) {\n\n  'use strict';\n\n  /* globals google */\n  var EMPTY = [];\n\n  /**\n   * @extension GoogleArrayMixin\n   * @mixin GoogleArrayMixin\n   */\n  exports['default'] = Ember['default'].Mixin.create({\n\n    googleArray: Ember['default'].computed(function (key, value) {\n      var array;\n      if (arguments.length > 1) {\n        // set\n        array = value ? value.getArray().slice() : [];\n        this.set('observersEnabled', false);\n        this.replace(0, this.get('length') || 0, this._startObservingEmberProperties(\n          this._google2ember(array, true), true\n        ));\n        this.set('observersEnabled', true);\n        return value;\n      }\n      else {\n        if (!helpers['default'].hasGoogleLib()) {\n          return;\n        }\n        return new google.maps.MVCArray(\n          this._ember2google(this._startObservingEmberProperties(this.toArray().slice(), true), true)\n        );\n      }\n    }),\n\n    emberItemFactory:       null,\n    googleItemFactory:      null,\n    observeEmberProperties: null,\n\n    _google2ember: function (item, isArray) {\n      if (this.emberItemFactory) {\n        if (isArray) {\n          for (var i = 0; i < item.length; i++) {\n            item[i] = this.emberItemFactory(item[i]);\n          }\n        }\n        else {\n          item = this.emberItemFactory(item);\n        }\n      }\n      return item;\n    },\n\n    _ember2google: function (item, isArray) {\n      if (this.googleItemFactory) {\n        if (isArray) {\n          for (var i = 0; i < item.length; i++) {\n            item[i] = this.googleItemFactory(item[i]);\n          }\n        }\n        else {\n          item = this.googleItemFactory(item);\n        }\n      }\n      return item;\n    },\n\n    _startObservingEmberProperties: function (object, isArray) {\n      var props = this.get('observeEmberProperties'), emberArray = this;\n      if (props && props.length) {\n        var one = function (obj) {\n          for (var i = 0; i < props.length; i++) {\n            Ember['default'].addObserver(obj, props[i], emberArray, '_handleObjectPropertyChange');\n          }\n        };\n        if (isArray) {\n          for (var i = 0; i < object.length; i++) {\n            one(object[i]);\n          }\n        }\n        else {\n          one(object);\n        }\n      }\n      return object;\n    },\n\n    _stopObservingEmberProperties: function (object, isArray) {\n      var props = this.get('observeEmberProperties'), emberArray = this;\n      if (props && props.length) {\n        var one = function (obj) {\n          for (var i = 0; i < props.length; i++) {\n            Ember['default'].removeObserver(obj, props[i], emberArray, '_handleObjectPropertyChange');\n          }\n        };\n        if (isArray) {\n          for (var i = 0; i < object.length; i++) {\n            one(object[i]);\n          }\n        }\n        else {\n          one(object);\n        }\n      }\n      return object;\n    },\n\n    _handleObjectPropertyChange: function (sender/*, key, value*/) {\n      var index = -1, array, googleArray;\n      if (this.get('observersEnabled')) {\n        this.set('observersEnabled', false);\n        array = this.toArray();\n        googleArray = this.get('googleArray');\n        while ((index = array.indexOf(sender, index + 1)) !== -1) {\n          googleArray.setAt(index, this._ember2google(array[index]));\n        }\n        this.set('observersEnabled', true);\n      }\n    },\n\n    googleListenersEnabled: null,\n\n    observersEnabledLevel: 0,\n\n    observersEnabled: Ember['default'].computed(function (key, value) {\n      if (arguments.length > 1) {\n        value = this.incrementProperty('observersEnabledLevel', value ? 1 : -1);\n      }\n      else {\n        value = this.get('observersEnabledLevel');\n      }\n      return (value === 0);\n    }),\n\n    setupGoogleArray: Ember['default'].observer('googleArray', Ember['default'].on('init', function () {\n      var googleArray = this.get('googleArray');\n      Ember['default'].warn('setting up a google array but it has not been teardown first', !this._googleListeners);\n      if (googleArray) {\n        // setup observers/events\n        this._googleListeners = {\n          insertAt: googleArray.addListener('insert_at', this.handleGoogleInsertAt.bind(this)),\n          removeAt: googleArray.addListener('remove_at', this.handleGoogleRemoveAt.bind(this)),\n          setAt:    googleArray.addListener('set_at', this.handleGoogleSetAt.bind(this))\n        };\n      }\n    })),\n\n    teardownGoogleArray: Ember['default'].beforeObserver('googleArray', Ember['default'].on('destroy', function () {\n      if (this._googleListeners) {\n        if (helpers['default'].hasGoogleLib()) {\n          // teardown observers/events\n          for (var k in this._googleListeners) {\n            if (this._googleListeners.hasOwnProperty(k)) {\n              google.maps.event.removeListener(this._googleListeners[k]);\n            }\n          }\n        }\n        this._googleListeners = null;\n      }\n      this._stopObservingEmberProperties(this.toArray(), true);\n    })),\n\n    handleGoogleInsertAt: function (index) {\n      if (this.get('observersEnabled')) {\n        this.set('observersEnabled', false);\n        this.replace(index, 0, [\n          this._startObservingEmberProperties(this._google2ember(this.get('googleArray').getAt(index)))\n        ]);\n        this.set('observersEnabled', true);\n      }\n    },\n\n    handleGoogleRemoveAt: function (index) {\n      if (this.get('observersEnabled')) {\n        this.set('observersEnabled', false);\n        this._stopObservingEmberProperties(this.objectAt(index));\n        this.replace(index, 1, EMPTY);\n        this.set('observersEnabled', true);\n      }\n    },\n\n    handleGoogleSetAt: function (index) {\n      if (this.get('observersEnabled')) {\n        this.set('observersEnabled', false);\n        this._stopObservingEmberProperties(this.objectAt(index));\n        this.replace(index, 1, [\n          this._startObservingEmberProperties(this._google2ember(this.get('googleArray').getAt(index)))\n        ]);\n        this.set('observersEnabled', true);\n      }\n    },\n\n    arrayContentDidChange: function (start, removeCount, addCount) {\n      var i, googleArray, slice;\n      this._super.apply(this, arguments);\n      if (this.get('observersEnabled')) {\n        this.set('observersEnabled', false);\n        googleArray = this.get('googleArray');\n        for (i = 0; i < removeCount; i++) {\n          this._stopObservingEmberProperties(this.objectAt(start));\n          googleArray.removeAt(start);\n        }\n        slice = this._ember2google(\n          this._startObservingEmberProperties(this.toArray().slice(start, start + addCount), true), true\n        );\n        while (slice.length) {\n          googleArray.insertAt(start, slice.pop());\n        }\n        this.set('observersEnabled', true);\n      }\n    }\n  });\n\n});","define('ember-google-map/mixins/google-object', ['exports', 'ember', 'ember-google-map/core/google-object-property', 'ember-google-map/core/google-object-event'], function (exports, Ember, GoogleObjectProperty, GoogleObjectEvent) {\n\n  'use strict';\n\n  var computed = Ember['default'].computed;\n  var oneWay = computed.oneWay;\n  var fmt = Ember['default'].String.fmt;\n  var forEach = Ember['default'].EnumerableUtils.forEach;\n\n  /**\n   * @extension GoogleObjectMixin\n   * @mixin GoogleObjectMixin\n   */\n  var GoogleObjectMixin = Ember['default'].Mixin.create({\n    /**\n     * The fully qualified class name of the object\n     * @property googleFQCN\n     * @type {string}\n     */\n    googleFQCN: null,\n\n    /**\n     * The class of this object\n     * @property googleClass\n     * @type {subclass of google.maps.MVCObject}\n     */\n    googleClass: computed('googleFQCN', function (key, value) {\n      var path;\n      if (arguments.length > 1) {\n        return value;\n      }\n      else {\n        path = this.get('googleFQCN');\n        if (path) {\n          return Ember['default'].get(window, path);\n        }\n      }\n    }),\n\n\n    /**\n     * Name/label of the object for debug\n     * @property googleName\n     * @type {string}\n     */\n    googleName: computed('googleFQCN', function (key, value) {\n      var name;\n      if (arguments.length > 1) {\n        return value;\n      }\n      else {\n        name = this.get('googleFQCN');\n        return name ? Ember['default'].String.dasherize(name.split('.').pop()) : this.toString();\n      }\n    }),\n\n    /**\n     * The definition of all google properties to bind\n     * @property googleProperties\n     * @type Object\n     */\n    googleProperties: Ember['default'].required(),\n\n    /**\n     * The definition of all google events to bind\n     * @property googleEvents\n     * @type Object\n     */\n    googleEvents: oneWay('controller.googleEvents'),\n\n    /**\n     * The google object itself\n     * @property googleObject\n     * @type google.maps.MVCObject\n     */\n    googleObject: null,\n\n    /**\n     * Creates the google object\n     *\n     * @method createGoogleObject\n     * @param {*} [firstArg]\n     * @param {Object} [optionsOverrides]\n     * @return {google.maps.MVCObject}\n     */\n    createGoogleObject: function (optionsOverrides) {\n      var opt = this.serializeGoogleOptions(), object, firstArg, Class;\n      if (arguments.length === 2) {\n        firstArg = optionsOverrides;\n        optionsOverrides = arguments[1];\n      }\n      opt = Ember['default'].merge(opt, optionsOverrides);\n      Ember['default'].debug(fmt(\n        '[google-maps] creating new %@: %@', this.get('googleName'), opt\n      ));\n      Class = this.get('googleClass');\n      if (firstArg) {\n        object = new Class(firstArg, opt);\n      }\n      else {\n        object = new Class(opt);\n      }\n      this.set('googleObject', object);\n      this.synchronizeEmberObject();\n      return object;\n    },\n\n\n    /**\n     * An array of all compiled (parsed) properties\n     * @property _compiledProperties\n     * @type Array.<GoogleObjectProperty>\n     * @private\n     */\n    _compiledProperties: computed(function () {\n      var def = this.get('googleProperties') || {},\n        res = [], d, defined = Object.create(null);\n      for (var k in def) {\n        if (def.hasOwnProperty(k)) {\n          d = def[k];\n          if (typeof d === 'string') {\n            d = {name: d};\n          }\n          else if (d === true) {\n            d = {};\n          }\n          res.push(d = new GoogleObjectProperty['default'](k, d));\n          defined[d.getName()] = null;\n          d = null;\n        }\n      }\n      // now read all properties of the object which name start with 'gopt_'\n      def = Ember['default'].keys(this);\n      for (var i = 0; i < def.length; i++) {\n        if (/^gopt_/.test(def[i]) && (k = def[i].substr(5)) && !(k in defined)) {\n          res.push(new GoogleObjectProperty['default'](def[i], {name: k, optionOnly: true}));\n        }\n      }\n      return Ember['default'].A(res);\n    }).readOnly(),\n\n    /**\n     * An array of all compiled (parsed) events\n     * @property _compiledEvents\n     * @type Array.<GoogleObjectEvent>\n     * @private\n     */\n    _compiledEvents: computed(function () {\n      var def, k, res, d, defaultTarget;\n      def = this.get('googleEvents') || {};\n      res = [];\n      defaultTarget = this.get('googleEventsTarget');\n\n      // first add our core events\n      forEach(this.get('_coreGoogleEvents') || [], function (name) {\n        res.push(new GoogleObjectEvent['default'](name, {\n          target:  this,\n          method:  '_handleCoreEvent',\n          prepend: true\n        }));\n      });\n\n      // then add user defined events\n      for (k in def) {\n        if (def.hasOwnProperty(k)) {\n          d = def[k];\n          if (typeof d === 'string') {\n            d = {action: d};\n          }\n          else if (d === true) {\n            d = {};\n          }\n          if (!d.target && defaultTarget) {\n            d.target = defaultTarget;\n          }\n          res.push(new GoogleObjectEvent['default'](k, d));\n          d = null;\n        }\n      }\n      return Ember['default'].A(res);\n    }).readOnly(),\n\n    /**\n     * Handle a core event\n     *\n     * @method _handleCoreEvent\n     * @param {string} name\n     */\n    _handleCoreEvent: function (name) {\n      Ember['default'].debug(fmt(\n        '[google-map] Unhandled core event `%@` triggered on `%@`', name, this.get('googleName')\n      ));\n    },\n\n\n    /**\n     * Serialize all google options into an object usable with google object constructor\n     *\n     * @method serializeGoogleOptions\n     * @returns {Object}\n     */\n    serializeGoogleOptions: function () {\n      var res = {}, def = this.get('_compiledProperties');\n      for (var i = 0; i < def.length; i++) {\n        def[i].toOptions(this, res);\n      }\n      return res;\n    },\n\n    /**\n     * Synchronize this Ember object by reading all values of the properties from google object\n     */\n    synchronizeEmberObject: function () {\n      var def = this.get('_compiledProperties'),\n        go = this.get('googleObject');\n      if (!go) {\n        return;\n      }\n      this.beginPropertyChanges();\n      for (var i = 0; i < def.length; i++) {\n        if (!def[i]._cfg.readOnly) {\n          this.setProperties(def[i].readGoogle(go));\n        }\n      }\n      this.endPropertyChanges();\n    },\n\n    /**\n     * Unlink the google object\n     */\n    unlinkGoogleObject: Ember['default'].beforeObserver('googleObject', function () {\n      this.get('_compiledEvents').invoke('unlink');\n      this.get('_compiledProperties').invoke('unlink');\n    }),\n\n    /**\n     * Link the google object to this object\n     */\n    linkGoogleObject: Ember['default'].observer('googleObject', function () {\n      var obj = this.get('googleObject');\n      if (obj) {\n        this.get('_compiledProperties').invoke('link', this, obj);\n        this.get('_compiledEvents').invoke('link', this, obj);\n      }\n    }),\n\n    /**\n     * Destroy our object, removing all listeners and pointers to google's object\n     */\n    destroyGoogleObject: Ember['default'].on('destroy', function () {\n      this.set('googleObject', null);\n      this.get('_compiledEvents').clear();\n      this.get('_compiledProperties').clear();\n    })\n  });\n\n  exports['default'] = GoogleObjectMixin;\n\n});","define('ember-google-map/utils/load-google-map', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var promise;\n\n  /**\n   * Loads the google map SDK\n   *\n   * @return {Ember.RSVP.Promise}\n   */\n  function loadGoogleMap(resolveWith) {\n    var src, $meta = Ember['default'].$('meta[name=\"ember-google-map-sdk-url\"]');\n    if ($meta.length) {\n      // get the url of the script and remove the meta\n      src = $meta.attr('content');\n      $meta.remove();\n      // promise making sure the script is loaded\n      return promise = new Ember['default'].RSVP.Promise(function (resolve, reject) {\n        window.__emberGoogleMapLoaded__ = Ember['default'].run.bind(function () {\n          promise = null;\n          window.__emberGoogleMapLoaded__ = null;\n          resolve(resolveWith);\n        });\n        Ember['default'].$.getScript(src + '&callback=__emberGoogleMapLoaded__').fail(function (jqXhr) {\n          promise = null;\n          window.__emberGoogleMapLoaded__ = null;\n          reject(jqXhr);\n        });\n      });\n    }\n    else if (promise) {\n      // we already have the promise loading the script, use it as the core promise to wait for but\n      // resolve to what was given this time\n      return promise.then(function () {\n        return resolveWith;\n      });\n    }\n    else {\n      // no need to do anything, resolve directly\n      return Ember['default'].RSVP.resolve(resolveWith);\n    }\n  }\n  exports['default'] = loadGoogleMap;\n\n});"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvpjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"addons.js"}